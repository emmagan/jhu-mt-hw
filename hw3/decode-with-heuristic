#!/usr/bin/env python
import optparse
import sys
import models as models
from collections import namedtuple

optparser = optparse.OptionParser()
optparser.add_option("-i", "--input", dest="input", default="data/input", help="File containing sentences to translate (default=data/input)")
optparser.add_option("-t", "--translation-model", dest="tm", default="data/tm", help="File containing translation model (default=data/tm)")
optparser.add_option("-l", "--language-model", dest="lm", default="data/lm", help="File containing ARPA-format language model (default=data/lm)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxsize, type="int", help="Number of sentences to decode (default=no limit)")
optparser.add_option("-k", "--translations-per-phrase", dest="k", default=1, type="int", help="Limit on number of translations to consider per phrase (default=1)")
optparser.add_option("-s", "--stack-size", dest="s", default=1, type="int", help="Maximum stack size (default=1)")
optparser.add_option("-d", "--distortion-limit", dest="d", default=sys.maxsize, type="int", help="Reordering limit (default=no limit)")
optparser.add_option("-v", "--verbose", dest="verbose", action="store_true", default=False,  help="Verbose mode (default=off)")
opts = optparser.parse_args()[0]

tm = models.TM(opts.tm, opts.k)
lm = models.LM(opts.lm)
french = [tuple(line.strip().split()) for line in open(opts.input).readlines()[:opts.num_sents]]

# tm should translate unknown words as-is with probability 1
for word in set(sum(french,())):
    if (word,) not in tm:
        tm[(word,)] = [models.phrase(word, 0.0)]

def extract_english(h):
    return "" if h.predecessor is None else "%s%s " % (extract_english(h.predecessor), h.phrase.english)

sys.stderr.write("Decoding %s...\n" % (opts.input,))
for f in french:
    # The following code implements a monotone decoding
    # algorithm (one that doesn't permute the target phrases).
    # Hence all hypotheses in stacks[i] represent translations of
    # the first i words of the input sentence. You should generalize
    # this so that they can represent translations of *any* i words.
    hypothesis = namedtuple("hypothesis", "logprob, lm_state, predecessor, phrase, heuristic")
    initial_hypothesis = hypothesis(0.0, lm.begin(), None, None, float("inf"))
    stacks = [{} for _ in f] + [{}]
    stacks[0][lm.begin()] = initial_hypothesis
    for i, stack in enumerate(stacks[:-1]):
        for h in sorted(stack.values(),key=lambda h: -h.heuristic)[:opts.s]: # prune
            for j in range(i+1,len(f)+1):
                if f[i:j] in tm:
                    for phrase in tm[f[i:j]]:

                        # compute the heuristic value
                        total_heuristic_logprob = 0
                        m = j + 1
                        best_lm_state = h.lm_state
                        while (m < len(f)):
                            maximum = float("-inf")
                            max_end_index = m + 1
                            heur_lm_state = best_lm_state
                            for l in range(m + 1, len(f) + 1):
                                if f[m:l] in tm:
                                    for p in tm[f[m:l]]:
                                        lm_state = heur_lm_state
                                        logprob = p.logprob
                                        for word in p.english.split():
                                            (lm_state, word_logprob) = lm.score(lm_state, word)
                                            logprob += word_logprob

                                        if logprob > maximum:
                                            max_end_index = l
                                            maximum = logprob
                                            best_lm_state = lm_state
                            m = max_end_index
                            total_heuristic_logprob += maximum


                        logprob = h.logprob + phrase.logprob
                        lm_state = h.lm_state
                        for word in phrase.english.split():
                            (lm_state, word_logprob) = lm.score(lm_state, word)
                            logprob += word_logprob
                        logprob += lm.end(lm_state) if j == len(f) else 0.0
                        new_hypothesis = hypothesis(logprob, lm_state, h, phrase, logprob + total_heuristic_logprob)

                        if lm_state not in stacks[j] or stacks[j][lm_state].heuristic < logprob + total_heuristic_logprob:
                            stacks[j][lm_state] = new_hypothesis

                        backward = h
                        parent_hypotheses = []
                        count = 0
                        while backward.predecessor is not None and count <= opts.d:
                            # insert the new phrase in between two previous phrases
                            pred = backward.predecessor
                            parent_hypotheses.append(backward)

                            logprob = pred.logprob + phrase.logprob
                            lm_state = pred.lm_state
                            for word in phrase.english.split():
                                (lm_state, word_logprob) = lm.score(lm_state, word)
                                logprob += word_logprob
                            new_hypothesis_predecessor = hypothesis(logprob, lm_state, backward.predecessor, phrase, logprob + total_heuristic_logprob)

                            # add the rest of the phrases on top of the inserted phrase

                            new_hypothesis = None
                            previous = new_hypothesis_predecessor
                            parent_hypotheses.reverse()
                            for hyp in parent_hypotheses:
                                for word in hyp.phrase.english.split():
                                    (lm_state, word_logprob) = lm.score(lm_state, word)
                                    logprob += word_logprob
                                new_hypothesis = hypothesis(logprob, lm_state, previous, hyp.phrase, logprob + total_heuristic_logprob)
                                previous = new_hypothesis
                            parent_hypotheses.reverse()

                            if lm_state not in stacks[j] or stacks[j][lm_state].heuristic < logprob + total_heuristic_logprob:
                                stacks[j][lm_state] = new_hypothesis

                            backward = backward.predecessor
                            count += 1

    winner = max(stacks[-1].values(), key=lambda h: h.heuristic)

    print(extract_english(winner))

    if opts.verbose:
        def extract_tm_logprob(h):
            return 0.0 if h.predecessor is None else h.phrase.logprob + extract_tm_logprob(h.predecessor)
        tm_logprob = extract_tm_logprob(winner)
        sys.stderr.write("LM = %f, TM = %f, Total = %f\n" %
                         (winner.logprob - tm_logprob, tm_logprob, winner.logprob))
