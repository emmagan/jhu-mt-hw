#!/usr/bin/env python
import optparse
import sys
from collections import defaultdict

optparser = optparse.OptionParser()
optparser.add_option("-d", "--data", dest="train", default="data/hansards", help="Data filename prefix (default=data)")
optparser.add_option("-e", "--english", dest="english", default="e", help="Suffix of English filename (default=e)")
optparser.add_option("-f", "--french", dest="french", default="f", help="Suffix of French filename (default=f)")
optparser.add_option("-t", "--threshold", dest="threshold", default=0.5, type="float", help="Threshold for aligning with Dice's coefficient (default=0.5)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=100000000000, type="int", help="Number of sentences to use for training and alignment")
(opts, _) = optparser.parse_args()
f_data = "%s.%s" % (opts.train, opts.french)
e_data = "%s.%s" % (opts.train, opts.english)

#sys.stderr.write("Training with Dice's coefficient...")
bitext = [[sentence.strip().split() for sentence in pair] for pair in zip(open(f_data), open(e_data))][:opts.num_sents]
t = defaultdict(float)
count = defaultdict(float)
total = defaultdict(int)
s_total = defaultdict(float)

# initialize probablity t(e|f) uniformly
for (n, (f, e)) in enumerate(bitext):
  # TODO: should this be set(e) or just e? throughout i am confused :(  
  for e_i in e:
    for f_i in f:
      t[(e_i,f_i)] = 1/len(f)

# while t hasn't converged, run through an e-m iteration
converged = False
while not converged:
  for (n, (f, e)) in enumerate(bitext):
    # initialize count and total
    for f_i in set(f):
      total[f_i] = 0
      for e_j in set(e):
        count[(e_j,f_i)] = 0
    
    # compute normalization
    for e_j in set(e):
      s_total[e_j] = 0
      for f_i in set(f):
        s_total[e_j] += t[(e_j,f_i)]

    # TODO: collect counts
    for e_j in set(e):
      s_total[e_j] = 0
      for f_i in set(f):
        s_total[e_j] += t[(e_j,f_i)]

    # TODO: estimate probabilities

    # TODO: check convergence with previous iteration
    converged = True
'''
dice = defaultdict(int)
for (k, (f_i, e_j)) in enumerate(fe_count.keys()):
  dice[(f_i,e_j)] = 2.0 * fe_count[(f_i, e_j)] / (f_count[f_i] + e_count[e_j])
  if k % 5000 == 0:
    sys.stderr.write(".")
sys.stderr.write("\n")

for (f, e) in bitext:
  for (i, f_i) in enumerate(f): 
    for (j, e_j) in enumerate(e):
      if dice[(f_i,e_j)] >= opts.threshold:
        sys.stdout.write("%i-%i " % (i,j))
  sys.stdout.write("\n")

'''