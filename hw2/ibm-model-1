#!/usr/bin/env python
import optparse
import sys
import pandas as pd
from collections import defaultdict

optparser = optparse.OptionParser()
optparser.add_option("-d", "--data", dest="train", default="data/hansards", help="Data filename prefix (default=data)")
optparser.add_option("-e", "--english", dest="english", default="e", help="Suffix of English filename (default=e)")
optparser.add_option("-f", "--french", dest="french", default="f", help="Suffix of French filename (default=f)")
optparser.add_option("-t", "--threshold", dest="threshold", default=0.5, type="float", help="Threshold for aligning with Dice's coefficient (default=0.5)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=100000000000, type="int", help="Number of sentences to use for training and alignment")
(opts, _) = optparser.parse_args()
f_data = "%s.%s" % (opts.train, opts.french)
e_data = "%s.%s" % (opts.train, opts.english)

sys.stderr.write("Training with IBM Model 1...")
bitext = [[sentence.strip().split() for sentence in pair] for pair in zip(open(f_data), open(e_data))][:opts.num_sents]
t = defaultdict(float)
count = defaultdict(float)
total = defaultdict(int)
s_total = defaultdict(float)
df = pd.DataFrame()
i = 0

# initialize probablity t(e|f) uniformly
for (n, (f, e)) in enumerate(bitext):
  # TODO: should this be set(e) or just e? throughout i am confused :(  
  for e_i in e:
    for f_i in f:
      t[(e_i,f_i)] = 1/len(f)
df[i] = pd.Series(t)

# while t hasn't converged, run through an e-m iteration
converged = False
while not converged:
  # initialize count and total
  for (n, (f, e)) in enumerate(bitext):
    for f_i in f:
      total[f_i] = 0
      for e_j in e:
        count[(e_j, f_i)] = 0

  for (n, (f, e)) in enumerate(bitext):
    
    # compute normalization
    for e_j in e:
      s_total[e_j] = 0
      for f_i in f:
        s_total[e_j] += t[(e_j,f_i)]

    # collect counts
    for e_j in e:
      for f_i in f:
        count[(e_j,f_i)] += t[(e_j,f_i)]/s_total[e_j]
        total[f_i] += t[(e_j,f_i)]/s_total[e_j]

  # estimate probabilities
  for (n, (f, e)) in enumerate(bitext):
    for e_j in e:
      for f_i in f:
        t[(e_j,f_i)] = count[(e_j,f_i)]/total[f_i]

  # check convergence with previous iteration
  df[i+1] = pd.Series(t).round(2)
  converged = df[i].equals(df[i+1])
  i += 1

    # print(df.head())
    #takes 831 iterations for 10 words to be aligned

# TODO: fix bug with f_max
print(i)


for (f, e) in bitext:
  for (j, e_j) in enumerate(e):
    for (k, f_i) in enumerate(f):
      # find max probability
      f_max = df[i].loc[e_j].idxmax()
      #print(f_max)
      if f_i == f_max:
        sys.stdout.write("%i-%i " % (k, j))
  sys.stdout.write("\n")